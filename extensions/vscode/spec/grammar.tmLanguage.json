{
  "scopeName": "source.kyanite",
  "patterns": [{ "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#var-decl" },
        { "include": "#control-flow" },
        { "include": "#record-impl-decl" },
        { "include": "#strings" },
        { "include": "#functions" },
        { "include": "#keyword" },
        { "include": "#paren-expression" },
        { "include": "#comment" }
      ]
    },
    "comment": {
      "name": "comment.kyanite",
      "begin": "%",
      "end": "\\n"
    },
    "var-decl": {
      "match": "\\b(let)\\s+([a-zA-Z]+)(:)\\s+([A-Za-z]+)\\b",
      "captures": {
        "0": { "name": "entity.name.type.kyanite" },
        "2": { "name": "entity.name.variable.kyanite" },
        "3": { "name": "keyword.operator.kyanite" },
        "1": { "name": "keyword.kyanite" }
      }
    },
    "strings": {
      "name": "string.quoted.double.kyanite",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.kyanite",
          "match": "\\\\."
        }
      ]
    },
    "functions": {
      "match": "\\b(fun)\\s+([a-zA-Z]+)\\b",
      "captures": {
        "0": { "name": "entity.name.function.kyanite" },
        "1": { "name": "keyword.kyanite" }
      }
    },
    "keyword": {
      "match": "\\b(let|const|fun|impl)\\b",
      "name": "keyword.kyanite"
    },
    "control-flow": {
      "match": "\\b(if|else|while|for)\\b",
      "name": "keyword.control.kyanite"
    },
    "record-impl-decl": {
      "match": "\\b(rec|impl) ([a-zA-Z]+)\\b",
      "captures": {
        "1": {
          "name": "keyword.kyanite"
        },
        "0": {
          "name": "entity.name.type.kyanite"
        }
      }
    },
    "paren-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": { "name": "punctuation.paren.open" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.paren.close" }
      },
      "name": "expression.group",
      "patterns": [{ "include": "#expression" }]
    }
  }
}
